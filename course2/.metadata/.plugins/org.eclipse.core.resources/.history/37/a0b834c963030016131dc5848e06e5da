/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which reprsents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
package roadgraph;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;
import java.util.function.Consumer;
import geography.GeographicPoint;
import util.GraphLoader;
import week2example.MazeNode;



/**
 * @author UCSD MOOC development team and YOU
 * 
 *         A class which represents a graph of geographic locations Nodes in the
 *         graph are intersections between
 *
 */
public class MapGraph {
	// TODO: Add your member variables here in WEEK 2
	private HashMap<GeographicPoint, MapNode> verticies;
	private Set<MapEdge> edges;

	/**
	 * Create a new empty MapGraph
	 */
	public MapGraph() {
		// TODO: Implement in this constructor in WEEK 2
		verticies = new HashMap<GeographicPoint, MapNode>();
		edges = new HashSet<MapEdge>();
	}

	/**
	 * Get the number of vertices (road intersections) in the graph
	 * 
	 * @return The number of vertices in the graph.
	 */
	public int getNumVertices() {
		// TODO: Implement this method in WEEK 2
		return verticies.values().size();
	}

	/**
	 * Return the intersections, which are the vertices in this graph.
	 * 
	 * @return The vertices in this graph as GeographicPoints
	 */
	public Set<GeographicPoint> getVertices() {
		// TODO: Implement this method in WEEK 2
		Set<GeographicPoint> verticesPoints = new HashSet<GeographicPoint>();
		for (GeographicPoint gp : verticies.keySet()) {
			verticesPoints.add(gp);
		}
		return verticesPoints;
	}

	/**
	 * Get the number of road segments in the graph
	 * 
	 * @return The number of edges in the graph.
	 */
	public int getNumEdges() {
		// TODO: Implement this method in WEEK 2
		return edges.size();
	}

	/**
	 * Add a node corresponding to an intersection at a Geographic Point If the
	 * location is already in the graph or null, this method does not change the
	 * graph.
	 * 
	 * @param location
	 *            The location of the intersection
	 * @return true if a node was added, false if it was not (the node was
	 *         already in the graph, or the parameter is null).
	 */
	public boolean addVertex(GeographicPoint location) {
		// TODO: Implement this method in WEEK 2
		if (location == null) {
			System.out.println("location: " + location + " is NULL");
			return false;
		} else if (verticies.containsKey(location)) {
			System.out.println("location: " + location + " already available in graph");
			return false;
		} else {
			verticies.put(location, new MapNode(location));
			// System.out.println("vertex added: " + location);
		}
		// if ((location != null) || (!verticies.containsKey(location))) {
		// verticies.put(location, new MapNode(location));
		// System.out.println("vertex added: " + location);
		// return true;
		// }
		return true;
	}

	/**
	 * Adds a directed edge to the graph from pt1 to pt2. Precondition: Both
	 * GeographicPoints have already been added to the graph
	 * 
	 * @param from
	 *            The starting point of the edge
	 * @param to
	 *            The ending point of the edge
	 * @param roadName
	 *            The name of the road
	 * @param roadType
	 *            The type of the road
	 * @param length
	 *            The length of the road, in km
	 * @throws IllegalArgumentException
	 *             If the points have not already been added as nodes to the
	 *             graph, if any of the arguments is null, or if the length is
	 *             less than 0.
	 */
	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName, String roadType, double length)
			throws IllegalArgumentException {
		// TODO: Implement this method in WEEK 2
		// System.out.println("theMap.getNumVertices() - addEdge: " +
		// this.getNumVertices());
		MapNode fromMapNode = new MapNode(from);
		MapNode toMapNode = new MapNode(to);

		boolean verticiesContainsFrom = verticies.containsKey(from);
		boolean verticiesContainsTo = verticies.containsKey(to);
		//
		// System.out.println("location: " + from + ", verticiesContainsFrom: "
		// + verticiesContainsFrom);
		// System.out.println("location: " + to + ", verticiesContainsTo: " +
		// verticiesContainsTo);

		if (!verticiesContainsFrom) {
			throw new IllegalArgumentException("GeographicPoint : " + from + " not found in verticies");

		}
		if (!verticiesContainsTo) {
			throw new IllegalArgumentException("GeographicPoint : " + to + " not found in verticies");
		}

		MapEdge edge = new MapEdge(fromMapNode, toMapNode, roadName, roadType, length);
		// System.out.println("edge added: " + edge.getStart().getLocation() +
		// ", " + edge.getEnd().getLocation() + ", " + edge.getRoadName() + ", "
		// + edge.getRoadType() + ", " + edge.getDistance());

		edges.add(edge);

	}

	public void printVertices() {
		System.out.println("Printing Vertices....");
		System.out.println("Number of vertices: " + getNumVertices());

		for (GeographicPoint gp : verticies.keySet()) {
			System.out.println(verticies.get(gp).getLocation());
		}
		System.out.println("End of Vertices....");
	}

	public void printEdges() {
		System.out.println("Printing Edges....");
		System.out.println("Number of edges: " + getNumEdges());

		for (MapEdge edge : edges) {
			System.out.println("Start: " + edge.getStart().getLocation() + ", End " + edge.getEnd().getLocation()
					+ ", Road Name: " + edge.getRoadName() + ", Road Type: " + edge.getRoadType() + ", Distance: "
					+ edge.getDistance());
		}
		System.out.println("End of Edges....");
	}

	/**
	 * Find the path from start to goal using breadth first search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @return The list of intersections that form the shortest (unweighted)
	 *         path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return bfs(start, goal, temp);
	}

	/**
	 * Find the path from start to goal using breadth first search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @param nodeSearched
	 *            A hook for visualization. See assignment instructions for how
	 *            to use it.
	 * @return The list of intersections that form the shortest (unweighted)
	 *         path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal,
			Consumer<GeographicPoint> nodeSearched) {
		// TODO: Implement this method in WEEK 2
		MapNode startMapNode = new MapNode(start);
		MapNode goalMapNode = new MapNode(goal);

//		System.out.println("startMapNode.getLocation(): " + startMapNode.getLocation());
//		System.out.println("startMapNode.getNeighbors(edges, startMapNode).size(): " + startMapNode.getNeighbors(edges).size());

		if (start == null || goal == null) {
			System.out.println("Start or goal node is null!  No path exists.");
			return new LinkedList<GeographicPoint>();
		}
		
		HashSet<MapNode> visited = new HashSet<MapNode>();
		Queue<MapNode> toExplore = new LinkedList<MapNode>();
		HashMap<MapNode, MapNode> parentMap = new HashMap<MapNode, MapNode>();
		
		toExplore.add(startMapNode);
		boolean found = false;
		while(!toExplore.isEmpty()) {
			MapNode currMapNode = toExplore.remove();
			
			if(currMapNode == goalMapNode) {
				found = true;
				break;
			}
			
			List<MapNode> neighbors = currMapNode.getNeighbors(edges);
			System.out.println("currMapNode.getNeighbors(edges).size(): " + currMapNode.getNeighbors(edges).size());
		}
		
		// Hook for visualization. See writeup.
		// nodeSearched.accept(next.getLocation());

		return null;
	}

	/**
	 * Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		// You do not need to change this method.
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return dijkstra(start, goal, temp);
	}

	/**
	 * Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @param nodeSearched
	 *            A hook for visualization. See assignment instructions for how
	 *            to use it.
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal,
			Consumer<GeographicPoint> nodeSearched) {
		// TODO: Implement this method in WEEK 3

		// Hook for visualization. See writeup.
		// nodeSearched.accept(next.getLocation());

		return null;
	}

	/**
	 * Find the path from start to goal using A-Star search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return aStarSearch(start, goal, temp);
	}

	/**
	 * Find the path from start to goal using A-Star search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @param nodeSearched
	 *            A hook for visualization. See assignment instructions for how
	 *            to use it.
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal,
			Consumer<GeographicPoint> nodeSearched) {
		// TODO: Implement this method in WEEK 3

		// Hook for visualization. See writeup.
		// nodeSearched.accept(next.getLocation());

		return null;
	}

	public static void main(String[] args) {
		System.out.print("Making a new map...");
		MapGraph theMap = new MapGraph();
		System.out.println("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", theMap);
		System.out.println("DONE.");
//		theMap.printVertices();
//		System.out.println();
//		theMap.printEdges();
//		Consumer<GeographicPoint> temp;
//		theMap.bfs("Lat: 1.0, Lon: 1.0", "Lat: 4.0, Lon: 1.0", temp);
		// System.out.println("theMap.getNumVertices(): " +
		// theMap.getNumVertices());
		// You can use this method for testing.

		/*
		 * Use this code in Week 3 End of Week Quiz MapGraph theMap = new
		 * MapGraph(); System.out.print("DONE. \nLoading the map...");
		 * GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		 * System.out.println("DONE.");
		 * 
		 * GeographicPoint start = new GeographicPoint(32.8648772,
		 * -117.2254046); GeographicPoint end = new GeographicPoint(32.8660691,
		 * -117.217393);
		 * 
		 * 
		 * List<GeographicPoint> route = theMap.dijkstra(start,end);
		 * List<GeographicPoint> route2 = theMap.aStarSearch(start,end);
		 * 
		 */

	}

}
