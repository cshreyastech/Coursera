/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which reprsents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
package roadgraph;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Consumer;

import geography.GeographicPoint;
import util.GraphLoader;

/**
 * @author UCSD MOOC development team and YOU
 * 
 *         A class which represents a graph of geographic locations Nodes in the
 *         graph are intersections between
 *
 */
public class MapGraph {
	// TODO: Add your member variables here in WEEK 2
	private HashMap<GeographicPoint, MapNode> verticies;
	private Set<MapEdge> edges;

	/**
	 * Create a new empty MapGraph
	 */
	public MapGraph() {
		// TODO: Implement in this constructor in WEEK 2
		verticies = new HashMap<GeographicPoint, MapNode>();
		edges = new HashSet<MapEdge>();
	}

	/**
	 * Get the number of vertices (road intersections) in the graph
	 * 
	 * @return The number of vertices in the graph.
	 */
	public int getNumVertices() {
		// TODO: Implement this method in WEEK 2
		return verticies.values().size();
	}

	/**
	 * Return the intersections, which are the vertices in this graph.
	 * 
	 * @return The vertices in this graph as GeographicPoints
	 */
	public Set<GeographicPoint> getVertices() {
		// TODO: Implement this method in WEEK 2
		Set<GeographicPoint> verticesPoints = new HashSet<GeographicPoint>();
		for (GeographicPoint gp : verticies.keySet()) {
			verticesPoints.add(gp);
		}
		return verticesPoints;
	}

	/**
	 * Get the number of road segments in the graph
	 * 
	 * @return The number of edges in the graph.
	 */
	public int getNumEdges() {
		// TODO: Implement this method in WEEK 2
		return edges.size();
	}

	/**
	 * Add a node corresponding to an intersection at a Geographic Point If the
	 * location is already in the graph or null, this method does not change the
	 * graph.
	 * 
	 * @param location
	 *            The location of the intersection
	 * @return true if a node was added, false if it was not (the node was
	 *         already in the graph, or the parameter is null).
	 */
	public boolean addVertex(GeographicPoint location) {
		// TODO: Implement this method in WEEK 2
		if (location == null) {
			System.out.println("location: " + location + " is NULL");
			return false;
		} else if (verticies.containsKey(location)) {
			System.out.println("location: " + location + " already available in graph");
			return false;
		} else {
			verticies.put(location, new MapNode(location));
		}
		return true;
	}

	/**
	 * Adds a directed edge to the graph from pt1 to pt2. Precondition: Both
	 * GeographicPoints have already been added to the graph
	 * 
	 * @param from
	 *            The starting point of the edge
	 * @param to
	 *            The ending point of the edge
	 * @param roadName
	 *            The name of the road
	 * @param roadType
	 *            The type of the road
	 * @param length
	 *            The length of the road, in km
	 * @throws IllegalArgumentException
	 *             If the points have not already been added as nodes to the
	 *             graph, if any of the arguments is null, or if the length is
	 *             less than 0.
	 */
	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName, String roadType, double length)
			throws IllegalArgumentException {
		// TODO: Implement this method in WEEK 2
		MapNode fromMapNode = new MapNode(from);
		MapNode toMapNode = new MapNode(to);

		boolean verticiesContainsFrom = verticies.containsKey(from);
		boolean verticiesContainsTo = verticies.containsKey(to);

		if (!verticiesContainsFrom) {
			throw new IllegalArgumentException("GeographicPoint : " + from + " not found in verticies");

		}
		if (!verticiesContainsTo) {
			throw new IllegalArgumentException("GeographicPoint : " + to + " not found in verticies");
		}

		MapEdge edge = new MapEdge(fromMapNode, toMapNode, roadName, roadType, length);
		edges.add(edge);

	}

	public void callSetNeighbors() {
		for (Map.Entry<GeographicPoint, MapNode> entry : verticies.entrySet()) {
			MapNode mapNode = entry.getValue();
			mapNode.setNeighbors(edges);
		}

	}

	public void printVertices() {
		System.out.println("Printing Vertices....");
		System.out.println("Number of vertices: " + getNumVertices());

		for (GeographicPoint gp : verticies.keySet()) {
			System.out.println(verticies.get(gp).getLocation() + ", " + verticies.get(gp).getDistanceFromOrigin());
		}
		System.out.println("End of Vertices....");
	}

	public void printEdges() {
		System.out.println("Printing Edges....");
		System.out.println("Number of edges: " + getNumEdges());

		for (MapEdge edge : edges) {
			System.out.println("Start: " + edge.getStart().getLocation() + ", End " + edge.getEnd().getLocation()
					+ ", Road Name: " + edge.getRoadName() + ", Road Type: " + edge.getRoadType() + ", Distance: "
					+ edge.getDistance());
		}
		System.out.println("End of Edges....");
	}

	/**
	 * Find the path from start to goal using breadth first search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @return The list of intersections that form the shortest (unweighted)
	 *         path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return bfs(start, goal, temp);
	}

	/**
	 * Find the path from start to goal using breadth first search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @param nodeSearched
	 *            A hook for visualization. See assignment instructions for how
	 *            to use it.
	 * @return The list of intersections that form the shortest (unweighted)
	 *         path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal,
			Consumer<GeographicPoint> nodeSearched) {
		// TODO: Implement this method in WEEK 2

		if (!initialCheck(start, goal)) {
			System.out.println("Initial check not satisfied");
			return null;
		}

		MapNode startMapNode = new MapNode(start);
		MapNode goalMapNode = new MapNode(goal);

		HashSet<GeographicPoint> visited = new HashSet<GeographicPoint>();
		Queue<MapNode> toExplore = new LinkedList<MapNode>();
		HashMap<GeographicPoint, GeographicPoint> parentMap = new HashMap<GeographicPoint, GeographicPoint>();

		toExplore.add(startMapNode);
		visited.add(start);
		boolean found = false;
		while (!toExplore.isEmpty()) {
			MapNode curr = toExplore.remove();

			if (curr.getLocation().equals(goalMapNode.getLocation())) {
				found = true;
				break;
			}
			// curr.setNeighbors(edges);
			List<MapNode> neighbors = curr.getNeighbors(edges);
			ListIterator<MapNode> it = neighbors.listIterator(neighbors.size());
			while (it.hasPrevious()) {
				MapNode next = it.previous();

				if (!visited.contains(next.getLocation())) {
					visited.add(next.getLocation());
					parentMap.put(next.getLocation(), curr.getLocation());
					toExplore.add(next);

					// Hook for visualization. See writeup.
					nodeSearched.accept(next.getLocation());

				}
			}

		}
		if (!found) {
			System.out.println("path Not found");
			return null;
		} else {
			System.out.println("path exists");
		}

		// reconstruct the path
		LinkedList<GeographicPoint> path = new LinkedList<GeographicPoint>();
		GeographicPoint currGeoLocation = goalMapNode.getLocation();

		while (!currGeoLocation.equals(startMapNode.getLocation())) {
			path.addFirst(currGeoLocation);

			currGeoLocation = parentMap.get(currGeoLocation);
		}
		path.addFirst(startMapNode.getLocation());

		// Hook for visualization. See writeup.
		// nodeSearched.accept(next.getLocation());

		return path;
	}

	private boolean initialCheck(GeographicPoint start, GeographicPoint goal) {
		if ((start == null) || (goal == null)) {
			throw new NullPointerException("Null start or goal location");
		}
		if (verticies.get(start) == null) {
			System.out.println("Start Node not found in dataset");
			return false;
		}
		if (verticies.get(goal) == null) {
			System.out.println("Goal Node not found in dataset");
			return false;
		}
		return true;
	}

	/**
	 * Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		// You do not need to change this method.
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return dijkstra(start, goal, temp);
	}

	/**
	 * Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @param nodeSearched
	 *            A hook for visualization. See assignment instructions for how
	 *            to use it.
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal,
			Consumer<GeographicPoint> nodeSearched) {
		// TODO: Implement this method in WEEK 3

		// HashMap<GeographicPoint, MapNode> verticiesCopy = new
		// HashMap<GeographicPoint, MapNode>();
		// verticies.forEach(verticiesCopy::putIfAbsent);

		return searchOnGraph(start, goal, nodeSearched);
	}

	/**
	 * Find the path from start to goal using A-Star search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return aStarSearch(start, goal, temp);
	}

	/**
	 * Find the path from start to goal using A-Star search
	 * 
	 * @param start
	 *            The starting location
	 * @param goal
	 *            The goal location
	 * @param nodeSearched
	 *            A hook for visualization. See assignment instructions for how
	 *            to use it.
	 * @return The list of intersections that form the shortest path from start
	 *         to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal,
			Consumer<GeographicPoint> nodeSearched) {
		// TODO: Implement this method in WEEK 3

		// Hook for visualization. See writeup.
		// nodeSearched.accept(next.getLocation());

		// verticies.forEach(verticiesCopy::putIfAbsent);

		for (MapNode value : verticies.values()) {
			double estimatedDistanceFromGoal = 0.0;
			estimatedDistanceFromGoal = getDist(value.getLocation().getX(), value.getLocation().getY(), goal.getX(),
					goal.getY());

			value.setEstimatedDistanceFromGoal(estimatedDistanceFromGoal);
		}

		return searchOnGraph(start, goal, nodeSearched);
	}

	public List<GeographicPoint> searchOnGraph(GeographicPoint start, GeographicPoint goal,
			Consumer<GeographicPoint> nodeSearched) {
		if (!initialCheck(start, goal)) {
			System.out.println("Initial check not satisfied");
			return null;
		}

		MapNode startMapNode = new MapNode(start);
		MapNode goalMapNode = new MapNode(goal);

		HashSet<GeographicPoint> visited = new HashSet<GeographicPoint>();
		PriorityQueue<MapNode> toExplore = new PriorityQueue<MapNode>();
		HashMap<GeographicPoint, GeographicPoint> parentMap = new HashMap<GeographicPoint, GeographicPoint>();

		startMapNode.setDistanceFromOrigin(0.0);
		startMapNode
				.setEstimatedDistanceFromGoal(verticies.get(startMapNode.getLocation()).getEstimatedDistanceFromGoal());

		toExplore.add(startMapNode);
		verticies.get(start).setDistanceFromOrigin(0.0);

		boolean found = false;

		int nodesRemoved = 0;
		while (!toExplore.isEmpty()) {
			MapNode curr = toExplore.remove();
			nodesRemoved++;

			if (!visited.contains(curr.getLocation())) {
				visited.add(curr.getLocation());
				if (curr.getLocation().equals(goalMapNode.getLocation())) {
					found = true;
					break;
				}

				List<MapNode> neighbors = curr.getNeighbors(edges);

				ListIterator<MapNode> it = neighbors.listIterator(neighbors.size());
				while (it.hasPrevious()) {
					MapNode next = it.previous();
					next.setEstimatedDistanceFromGoal(verticies.get(next.getLocation()).getEstimatedDistanceFromGoal());

					// Hook for visualization. See writeup.
					nodeSearched.accept(next.getLocation());

					if (!visited.contains(next.getLocation())) {

						double edgeDistance = 0.0;
						MapEdge tempEdge = null;
						for (MapEdge edge : edges) {
							if ((edge.getStart().getLocation().equals(curr.getLocation()))
									&& (edge.getEnd().getLocation().equals(next.getLocation()))) {
								tempEdge = edge;
								break;
							}
						}
						edgeDistance = tempEdge.getDistance();

						double distanceThroughCurr = verticies.get(curr.getLocation()).getDistanceFromOrigin()
								+ edgeDistance;

						if (distanceThroughCurr < verticies.get(next.getLocation()).getDistanceFromOrigin()) {
							verticies.get(next.getLocation()).setDistanceFromOrigin(distanceThroughCurr);
							next.setDistanceFromOrigin(distanceThroughCurr);

							parentMap.put(next.getLocation(), curr.getLocation());

							toExplore.add(next);
						}
					}
				}
			}
		}

		if (!found) {
			System.out.println("path Not found");
			return null;
		} else {
			System.out.println("path exists");
		}

		System.out.println("Nodes Removed: " + nodesRemoved);

		// reconstruct the path
		LinkedList<GeographicPoint> path = new LinkedList<GeographicPoint>();
		GeographicPoint currGeoLocation = goalMapNode.getLocation();

		while (!currGeoLocation.equals(startMapNode.getLocation())) {
			path.addFirst(currGeoLocation);

			currGeoLocation = parentMap.get(currGeoLocation);
		}
		path.addFirst(startMapNode.getLocation());

		return path;
	}

	private double getDist(double lat1, double lon1, double lat2, double lon2) {

		int R = 6373; // radius of the earth in kilometres
		double lat1rad = Math.toRadians(lat1);
		double lat2rad = Math.toRadians(lat2);
		double deltaLat = Math.toRadians(lat2 - lat1);
		double deltaLon = Math.toRadians(lon2 - lon1);

		double a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2)
				+ Math.cos(lat1rad) * Math.cos(lat2rad) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);
		double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

		double d = R * c;
		return d;
	}

	//http://www.public.asu.edu/~huanliu/AI04S/project1.htm
	private Set<MapEdge> sortEdges() {
		Set<MapEdge> sortedEdges = new TreeSet<MapEdge>();
		sortedEdges.addAll(edges);
		
		System.out.println("Printing Sorted Edges....");
		System.out.println("Number of edges: " + sortedEdges.size());

		for (MapEdge edge : sortedEdges) {
			System.out.println("Start: " + edge.getStart().getLocation() + ", End " + edge.getEnd().getLocation()
					+ ", Road Name: " + edge.getRoadName() + ", Road Type: " + edge.getRoadType() + ", Distance: "
					+ edge.getDistance());
		}
		System.out.println("End of Sorted Edges....");
		
		
		
		return sortedEdges;
	}
	
	public static void main(String[] args) {
		System.out.print("Making a new map...");
		MapGraph theMap = new MapGraph();
		System.out.println("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/testdata/simpletest2.map", theMap);
		// GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		System.out.println("DONE.");
		
		theMap.printVertices();
		theMap.sortEdges();
		
		// theMap.printVertices();
		// System.out.println();
		// theMap.printEdges();
		// Consumer<GeographicPoint> temp;
		// theMap.bfs("Lat: 1.0, Lon: 1.0", "Lat: 4.0, Lon: 1.0", temp);
		// System.out.println("theMap.getNumVertices(): " +
		// theMap.getNumVertices());
		// You can use this method for testing.

		// Use this code in Week 3 End of Week Quiz
		// MapGraph theMap = new MapGraph();
		// System.out.print("DONE. \nLoading the map...");
		// GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		// System.out.println("DONE.");

		// GeographicPoint start = new GeographicPoint(32.8648772,
		// -117.2254046);
		// GeographicPoint end = new GeographicPoint(32.8660691, -117.217393);

		// GeographicPoint start = new GeographicPoint(1.0, 1.0);
		// GeographicPoint end = new GeographicPoint(8.0, -1.0);

		// List<GeographicPoint> route = theMap.dijkstra(start, end);

		// List<GeographicPoint> route2 = theMap.aStarSearch(start, end);

		// GeographicPoint start = new GeographicPoint(32.8648772,
		// -117.2254046);
		// GeographicPoint end = new GeographicPoint(32.8660691, -117.217393);
		//
		// List<GeographicPoint> route = theMap.dijkstra(start, end);
		// List<GeographicPoint> route2 = theMap.aStarSearch(start, end);

	}
}
